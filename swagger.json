{
  "openapi": "3.0.0",
  "info": {
    "title": "Product API",
    "version": "1.0.0",
    "description": "Microservice Product API"
  },
  "servers": [
    {
      "url": "http://localhost:3001"
    }
  ],
  "apis": [
    "/Users/icenteno/Desktop/Microservicios-nodeJS/product-service/src/**/**/*.ts"
  ],
  "paths": {
    "/api/v1/products/": {
      "get": {
        "description": "Get all Products",
        "tags": [
          "Products"
        ],
        "responses": {
          "200": {
            "description": "All Products",
            "content": {
              "appication/json": {
                "example": {
                  "status": 200,
                  "message": "Products"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTo"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTo"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTo"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Post info from new products",
        "tags": [
          "Products"
        ],
        "requestBody": {
          "description": "Create a new product",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductTo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Save data successful"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProductTo"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTo"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTo"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete any product by Id",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "number",
              "example": "1"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Deleted data successful"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTo"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTo"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/products/:id": {
      "put": {
        "description": "Put info from a products",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "number",
              "example": "1"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Edit fields of product",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductTo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Update data successful"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProductTo"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTo"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTo"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTo"
                }
              }
            }
          }
        }
      }
    },
    "/ping/": {
      "post": {
        "description": "Test service",
        "tags": [
          "Ping"
        ],
        "responses": {
          "200": {
            "description": "Pong",
            "content": {
              "appication/json": {
                "example": {
                  "status": 200,
                  "message": "pong"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorTo": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "Código de error de negocio",
            "example": 10
          },
          "errorMessage": {
            "type": "string",
            "description": "Error de sistema",
            "example": "Null pointer"
          },
          "userError": {
            "type": "string",
            "description": "Human readable error",
            "example": "No se encontró información"
          },
          "info": {
            "type": "string",
            "description": "Información sobre solución del error",
            "example": "http://info.com"
          }
        }
      },
      "ProductTo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id od product",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of product",
            "example": "Este es el nombre de un producto"
          },
          "description": {
            "type": "string",
            "description": "Date of the promotion",
            "example": "Esto es la descripción de un producto"
          },
          "qty": {
            "type": "number",
            "description": "Quantity of products",
            "example": 10
          }
        }
      }
    }
  },
  "tags": []
}